#!/bin/sh

#
# This file was automatically generated by Capistrano, and will be
# replaced on next deploy.
# Do not edit it manually.
#
#!/bin/bash
### BEGIN INIT INFO
#
# Provides:          clockwork
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: clockwork scheduler via init.d
# Description: see Short-Description
#
### END INIT INFO

TIMEOUT=${TIMEOUT-60}

APP_ROOT="<%= current_path %>"
RAILS_ENV="<%= fetch(:rails_env) %>"
AS_USER="<%= fetch(:clockwork_user) %>"
CONFIG="<%= fetch(:clockwork_config) %>"

PIDDIR="<%= fetch(:pids_path) %>"
LOGDIR="<%= fetch(:logs_path) %>"

ID="<%= fetch(:clockwork_id) %>"
PID="<%= fetch(:clockwork_pidfile) %>"

CMD="cd $APP_ROOT; RAILS_ENV=$RAILS_ENV bundle exec clockworkd \
-i $ID -c $CONFIG \
--pid-dir $PIDDIR --log --log-dir $LOGDIR start"

sig () {
  test -s "$PID" && kill -$1 `cat $PID` 2> /dev/null
}

run () {
  if [ "$(id -un)" = "$AS_USER" ]; then
    eval $1
  else
    su -c "$1" - $AS_USER
  fi
}

cleanup() {
  test -s "$PID" && rm -f "$PID"
}

start() {
  echo "Starting clockwork"
  sig 0 && echo >&2 "Clockwork is already running" && exit 0
  run "$CMD"
  echo "Clockwork is up"
}

stop() {
  printf "Stopping clockwork"
  sig QUIT
  sleep 1

  n=$TIMEOUT
  while sig 0 && test $n -ge 0
  do
    printf "\rStopping clockwork... Waiting $n sec out of $TIMEOUT"
    sleep 1 && n=$(( $n - 1 ))
  done

  if test $n -lt 0 && sig 0; then
    echo >&2 "\n$PID still exists after $TIMEOUT seconds"
    exit 1
  fi

  echo "\nClockwork is stopped. Cleaning up"
  cleanup
}

case "$1" in
    start)
        start
        exit 0
    ;;
    stop)
        stop
        exit 0
    ;;
    reload|restart|force-reload)
        stop
        start
        exit 0
    ;;
    **)
        echo "Usage: $0 {start|stop|reload}" 1>&2
        exit 1
    ;;
esac
